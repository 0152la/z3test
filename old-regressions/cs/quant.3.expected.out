(solver
  (forall ((x Type)) (subtype x x))
  (forall ((x Type) (y Type) (z Type))
    (=> (and (subtype x y) (subtype y z)) (subtype x z)))
  (forall ((x Type) (y Type)) (=> (and (subtype x y) (subtype y x)) (= x y)))
  (forall ((x Type) (y Type) (z Type))
    (=> (and (subtype x y) (subtype x z)) (or (subtype y z) (subtype z y))))
  (forall ((x Type) (y Type))
    (=> (subtype x y) (subtype (array_of x) (array_of y))))
  (forall ((x Type)) (subtype root x)))
SATISFIABLE
Type!val!1
Type!val!0
;; universe for Type:
;;   Type!val!1 Type!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun Type!val!1 () Type)
(declare-fun Type!val!0 () Type)
;; cardinality constraint:
(forall ((x Type)) (or (= x Type!val!1) (= x Type!val!0)))
;; -----------
(define-fun root () Type
  Type!val!0)
(define-fun elem!0 () Type
  Type!val!1)
(define-fun k!27 ((x!1 Type)) Type
  (ite (= x!1 Type!val!1) Type!val!1
    Type!val!0))
(define-fun subtype!28 ((x!1 Type) (x!2 Type)) Bool
  (ite (and (= x!1 Type!val!1) (= x!2 Type!val!0)) false
    true))
(define-fun subtype ((x!1 Type) (x!2 Type)) Bool
  (subtype!28 (k!27 x!1) (k!27 x!2)))
(define-fun array_of ((x!1 Type)) Type
  Type!val!1)
